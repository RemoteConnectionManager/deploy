[template]

download_dummy=
     mkdir -p ${BA_PKG_SOURCE_DIR}

computed_download_file=`python -c "import os; import sys;  print os.path.basename(sys.argv[1])" '@{download_url}'`
   
download_generic=
     cd @{work_dir}
     #get the downloaded file name
     file=@{downloaded_file}
     #avoid to download if already present
     if ! test -f ${file} ; then
      echo "expecting file-->${file}<--"
      echo "download command-->wget -nv '@{download_url}' --no-check-certificate --output-document=${file}<--"
      wget -nv '@{download_url}' --no-check-certificate --output-document=${file}
     else
       echo "skip download existing file-->${file}<--" 
     fi

untar_generic=
     mkdir -p @{untar_dir}
     # untar the file srip@{ping out the first path that should be the top folder
     # so it is forced to be @{untar_dir}
     tar -xvzf  ${file} --strip-components=1 -C @{untar_dir}

download_tar=
   if ! test -d @{source_dir} ; then
     @{download_generic}
     mkdir @{source_dir}
     # untar the file sripping out the first path that should be the top folder
     # so it is forced to be @{source_dir}
     tar -xvzf  ${file} --strip-components=1 -C @{source_dir}
   else
     echo "skipping existing source_dir:-->@{source_dir}<--"
   fi

download_zip=
   if ! test -d @{source_dir} ; then
     @{download_generic}
     #guess the unzipped dir name
     dir=`python -c "import os; import sys;  print os.path.splitext(sys.argv[1])[0]" ${file}`
     unzip -o ${file} 
     mv ${dir} @{source_dir}
   fi

download_tbz2=
   if ! test -d @{source_dir} ; then
     @{download_generic}
     mkdir @{source_dir}
     # bunzip the file on the fly and untar sripping out the first path that should be the top folder
     # so it is forced to be @{source_dir}
     bzcat < ${file} | tar -xvf - --strip-components=1 -C @{source_dir}
   fi


download_svn=
     cd @{work_dir}
     svn checkout @{download_url} @{source_dir}

download_git=
     cd @{work_dir}
     git clone @{download_url} @{source_dir}

install_copy_source=
     rm -rf @{install_dir}
     mkdir -p @{install_dir}
     cp -rf @{source_dir}/* @{install_dir}


configure_cmake=
     mkdir -p @{build_dir}
     cd @{build_dir}
     cmake  -DCMAKE_INSTALL_PREFIX=@{install_dir} @{cmake_definitions}  @{source_dir}

configure_flags=    
     
configure_outsource=
     mkdir -p @{build_dir}
     cd @{build_dir}
      @{source_dir}/configure --prefix=@{install_dir} @{configure_flags}
     make clean

configure_insource=
     ./configure --prefix="@{install_dir}" @{configure_flags}
     make clean

configure_qmake=
     mkdir -p @{build_dir}
     cd @{build_dir}
     qmake  @{source_dir}


make_outsource=
     cd @{build_dir}
     make @{parallel_make}

install_outsource=
     rm -rf @{install_dir}
     cd @{build_dir}
     make @{parallel_make} install
     @{post_install}

install_qmake=
     rm -rf @{install_dir}
     cd @{build_dir}
     make @{parallel_make}  INSTALL_ROOT=@{install_dir} install
     @{post_install}

remove_build=
     rm -rf @{build_dir}


[desktop]

desktop_helper=desktop_helper.py  @{general.name}/@{build.module_file}  --vglrun   --desktop_folder=@{install_dir}  --add_link --copy_icon

